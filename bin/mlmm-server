#!/usr/bin/env python

######################################################################
# ML/MM: https://github.com/lohedges/sander-mlmm
#
# Copyright: 2023
#
# Authors: Lester Hedges   <lester.hedges@gmail.com>
#          Kirill Zinovjev <kzinovjev@gmail.com>
#
# ML/MM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# ML/MM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ML/MM. If not, see <http://www.gnu.org/licenses/>.
######################################################################

import argparse
import os

from mlmm.mlmm import MLMMCalculator
from mlmm.socket import Socket

# Check whether any MLMM environment variables are set.
MLMM_HOST = os.getenv("MLMM_HOST")
try:
    MLMM_PORT = int(os.getenv("MLMM_PORT"))
except:
    MLMM_PORT = None
MLMM_MODEL = os.getenv("MLMM_MODEL")
try:
    MLMM_NUM_CLIENTS = int(os.getenv("MLMM_NUM_CLIENTS"))
except:
    MLMM_NUM_CLIENTS = None
MLMM_LOG = os.getenv("MLMM_LOG", "True").lower() in ("true", "1", "t")

# Fallback to default values.
if not MLMM_HOST:
    MLMM_HOST = "localhost"
if not MLMM_PORT:
    MLMM_PORT = 10000
if not MLMM_NUM_CLIENTS:
    MLMM_NUM_CLIENTS = 1


def validate_clients(num_clients):
    try:
        num_clients = int(num_clients)
    except:
        raise argparse.ArgumentTypeError(
            f"--num-clients: invalid int value: '{num_clients}'"
        )

    if num_clients < 0:
        raise argparse.ArgumentTypeError("--num-clients: Value must be >= 0")


# create argument parser.
parser = argparse.ArgumentParser(description="ML/MM server")

# parse command-line options
parser.add_argument("--host", type=str, help="the hostname.", required=False)
parser.add_argument("--port", type=str, help="the port number", required=False)
parser.add_argument(
    "--model", type=str, help="path to an ML/MM model file", required=False
)
parser.add_argument(
    "--num-clients",
    type=validate_clients,
    help="the maximum number of client connections to allow",
    required=False,
    default=1,
)
parser.add_argument(
    "--log",
    action=argparse.BooleanOptionalAction,
    help="whether to log energies",
    required=False,
)
args = parser.parse_args()

# Overload using command-line arguments.
if args.host:
    MLMM_HOST = args.host
if args.port:
    MLMM_PORT = args.port
if args.model:
    MLMM_MODEL = args.model
if args.num_clients:
    MLMM_NUM_CLIENTS = args.num_clients
if args.log is not None:
    MLMM_LOG = args.log

print("Starting ML-MM server...")

# Create the ML/MM socket.
sock = Socket()

try:
    sock.bind(MLMM_HOST, MLMM_PORT)
    sock.listen(MLMM_NUM_CLIENTS)

    # Write the PID to file in the current directory.
    with open("mlmm_pid.txt", "w") as f:
        f.write(f"{os.getpid()}\n")
except:
    raise OSError(
        f"Server address already in use: ({MLMM_HOST}, {MLMM_PORT})"
    ) from None

# Create the ML/MM calculator.
print("Initialising ML/MM calculator...")
mlmm_calculator = MLMMCalculator(model=MLMM_MODEL, log=MLMM_LOG)

while True:
    print("Waiting for a connection...")
    connection, client_address = sock.accept()
    try:
        print("Client connected:", client_address)
        while True:
            msg, path = connection.receive()
            if msg == "mlmmrun":
                # Try to run the ML/MM calculation.
                print("Running ML/MM calculation...")
                mlmm_calculator.run(path=path)

                # Tell the client that we have finished.
                print("Finished!")
                msg = "7:mlmmfin"
                connection.send(msg, len(msg))
            else:
                break
    finally:
        connection.close()
