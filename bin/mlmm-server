#!/usr/bin/env python

######################################################################
# ML/MM: https://github.com/lohedges/sander-mlmm
#
# Copyright: 2022-2023
#
# Authors: Lester Hedges   <lester.hedges@gmail.com>
#          Kirill Zinovjev <kzinovjev@gmail.com>
#
# ML/MM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# ML/MM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ML/MM. If not, see <http://www.gnu.org/licenses/>.
######################################################################

import argparse
import os

from mlmm import MLMMCalculator, Socket

# See if the MLMM HOST and PORT environment variable are set.
MLMM_HOST = os.getenv("MLMM_HOST")
MLMM_PORT = os.getenv("MLMM_PORT")
# Fallback to default values.
if not MLMM_HOST:
    MLMM_HOST = "localhost"
if not MLMM_PORT:
    MLMM_PORT = 10000


def validate_clients(num_clients):
    try:
        num_clients = int(num_clients)
    except:
        raise argparse.ArgumentTypeError(
            f"--num-clients: invalid int value: '{num_clients}'"
        )

    if num_clients < 0:
        raise argparse.ArgumentTypeError("--num-clients: Value must be >= 0")


# create argument parser.
parser = argparse.ArgumentParser(description="ML/MM server")

# parse command-line options
parser.add_argument("--host", type=str, help="The hostname.", required=False)
parser.add_argument("--port", type=str, help="The port number.", required=False)
parser.add_argument(
    "--num-clients",
    type=validate_clients,
    help="The maximum number of client connections to allow.",
    required=False,
    default=1,
)
args = parser.parse_args()

# Overload using command-line arguments.
if args.host:
    MLMM_HOST = args.host
if args.port:
    MLMM_PORT = args.port

print("Starting ML-MM server...")

# Create the ML/MM socket.
sock = Socket()

try:
    sock.bind(MLMM_HOST, MLMM_PORT)
    sock.listen(args.num_clients)
except:
    raise OSError(
        f"Server address already in use: ({MLMM_HOST}, {MLMM_PORT})"
    ) from None

# Create the ML/MM calculator.
print("Initialising ML/MM calculator...")
mlmm_calculator = MLMMCalculator()

while True:
    print("Waiting for a connection...")
    connection, client_address = sock.accept()
    try:
        print("Client connected:", client_address)
        while True:
            data = connection.receive()
            if data == "mlmmrun":
                # Try to run the ML/MM calculation.
                print("Running ML/MM calculation...")
                mlmm_calculator.run()

                # Tell the client that we have finished.
                print("Finished!")
                connection.send("mlmmfin")
            else:
                break
    finally:
        connection.close()
