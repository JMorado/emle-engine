#!/usr/bin/env python

#######################################################################
# EMLE-Engine: https://github.com/chemle/emle-engine
#
# Copyright: 2023
#
# Authors: Lester Hedges   <lester.hedges@gmail.com>
#          Kirill Zinovjev <kzinovjev@gmail.com>
#
# EMLE-Engine is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# EMLE-Engine is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EMLE-Engine If not, see <http://www.gnu.org/licenses/>.
#####################################################################

import argparse
import numpy as np
import os

from glob import glob

from emle.socket import Socket

# Check whether any EMLE environment variables are set.
EMLE_HOST = os.getenv("EMLE_HOST")
try:
    EMLE_PORT = int(os.getenv("EMLE_PORT"))
except:
    EMLE_PORT = None
EMLE_MODEL = os.getenv("EMLE_MODEL")
EMLE_METHOD = os.getenv("EMLE_METHOD")
EMLE_MM_CHARGES = os.getenv("EMLE_MM_CHARGES")
try:
    EMLE_NUM_CLIENTS = int(os.getenv("EMLE_NUM_CLIENTS"))
except:
    EMLE_NUM_CLIENTS = None
EMLE_BACKEND = os.getenv("EMLE_BACKEND")
EMLE_DEVICE = os.getenv("EMLE_DEVICE")
EMLE_LOG = os.getenv("EMLE_LOG", "True").lower() in ("true", "1", "t")
DEEPMD_MODEL = os.getenv("DEEPMD_MODEL")
RASCAL_MODEL = os.getenv("RASCAL_MODEL")
RASCAL_PARM7 = os.getenv("RASCAL_PARM7")

# Fallback to default values.
if not EMLE_HOST:
    EMLE_HOST = "localhost"
if not EMLE_PORT:
    EMLE_PORT = 10000
if not EMLE_NUM_CLIENTS:
    EMLE_NUM_CLIENTS = 1
if not EMLE_BACKEND:
    EMLE_BACKEND = "torchani"
if not EMLE_METHOD:
    EMLE_METHOD = "electrostatic"
if not EMLE_MM_CHARGES:
    EMLE_MM_CHARGES = None
if not EMLE_DEVICE:
    EMLE_DEVICE = None


def validate_clients(num_clients):
    try:
        num_clients = int(num_clients)
    except:
        raise argparse.ArgumentTypeError(
            f"--num-clients: invalid int value: '{num_clients}'"
        )

    if num_clients < 0:
        raise argparse.ArgumentTypeError("--num-clients: Value must be >= 0")


# create argument parser.
parser = argparse.ArgumentParser(description="EMLE server")

# parse command-line options
parser.add_argument("--host", type=str, help="the hostname.", required=False)
parser.add_argument("--port", type=str, help="the port number", required=False)
parser.add_argument(
    "--model", type=str, help="path to an EMLE model file", required=False
)
parser.add_argument(
    "--embedding",
    type=str,
    help="the embedding method to use",
    choices=["electrostatic", "mechanical", "nonpol", "mm"],
    required=False,
)
parser.add_argument(
    "--mm-charges",
    type=str,
    nargs="*",
    help="mm charges for atoms in the qm region in units of electron volt",
    required=False,
)
parser.add_argument(
    "--num-clients",
    type=validate_clients,
    help="the maximum number of client connections to allow",
    required=False,
    default=1,
)
parser.add_argument(
    "--backend",
    type=str,
    help="the in vacuo backend",
    choices=["deepmd", "rascal", "torchani", "orca"],
    required=False,
)
parser.add_argument(
    "--device",
    type=str,
    help="the device to be used by PyTorch",
    choices=["cpu", "cuda"],
    required=False,
)
parser.add_argument(
    "--deepmd-model",
    type=str,
    nargs="+",
    help="path to DeepMD model file(s)",
    required=False,
)
parser.add_argument(
    "--rascal-model",
    type=str,
    nargs="+",
    help="path to Rascal model file",
    required=False,
)
parser.add_argument(
    "--rascal-parm7",
    type=str,
    nargs="+",
    help="path to the parm7 file used to train the Rascal model",
    required=False,
)
parser.add_argument(
    "--log",
    action=argparse.BooleanOptionalAction,
    help="whether to log energies",
    required=False,
)
args = parser.parse_args()

# Overload using command-line arguments.
if args.host:
    EMLE_HOST = args.host
if args.port:
    EMLE_PORT = args.port
if args.model:
    EMLE_MODEL = args.model
if args.embedding:
    EMLE_METHOD = args.embedding
if args.mm_charges:
    EMLE_MM_CHARGES = args.mm_charges
if args.num_clients:
    EMLE_NUM_CLIENTS = args.num_clients
if args.backend:
    EMLE_BACKEND = args.backend
if args.device:
    EMLE_DEVICE = args.device
if args.deepmd_model:
    DEEPMD_MODEL = args.deepmd_model
if args.rascal_model:
    RASCAL_MODEL = args.rascal_model
if args.rascal_parm7:
    RASCAL_PARM7 = args.rascal_parm7
if args.log is not None:
    EMLE_LOG = args.log

# Validate the MM charges. Don't bother doing this if the user has
# specified "electrostatic" embedding.
if EMLE_METHOD == "mm":
    if EMLE_MM_CHARGES is None:
        raise ValueError("'mm_charges' are required when using 'mm' embedding")

    # Whether we are parsing a list of charges, rather than a file.
    is_list = False

    if isinstance(EMLE_MM_CHARGES, str):
        # If this isn't a path to a file, try splitting on commas.
        if not os.path.isfile(EMLE_MM_CHARGES):
            try:
                EMLE_MM_CHARGES = EMLE_MM_CHARGES.split(",")
                is_list = True
            except:
                raise ValueError(
                    "Unable to parse EMLE_MM_CHARGES environment variable as a comma-separated list of floats"
                )

    # A single entry list is assumed to be the path to a file.
    elif isinstance(EMLE_MM_CHARGES, list):
        if len(EMLE_MM_CHARGES) == 1:
            EMLE_MM_CHARGES = EMLE_MM_CHARGES[0]
        else:
            is_list = True

    # Try to parse lists of MM charges as a NumPy array of floats.
    if is_list:
        try:
            EMLE_MM_CHARGES = np.array([float(x) for x in EMLE_MM_CHARGES])
        except:
            raise TypeError("Unable to parse MM charges as an array of floats")

else:
    EMLE_MM_CHARGES = None

# Work out the DeePMD model. We allow the following formatting:
#    1) A path to a single file.
#    2) Multiple files specified using wildcards.
#    3) A list of files, comma-separated.
#
# The first two can be found using glob, if empty then try splitting on ",".
if DEEPMD_MODEL:
    if isinstance(DEEPMD_MODEL, list) and len(DEEPMD_MODEL) == 1:
        DEEPMD_MODEL = DEEPMD_MODEL[0]
    if isinstance(DEEPMD_MODEL, str):
        # Remove whitespace.
        DEEPMD_MODEL = DEEPMD_MODEL.replace(" ", "")

        # Try globbing.
        models = glob(DEEPMD_MODEL)

        # No matches.
        if not models:
            models = DEEPMD_MODEL.split(",")

            # Invalid formatting.
            if len(models) == 1:
                raise ValueError(
                    f"DeePMD model not found, or invalid formatting: '{DEEPMD_MODEL}'"
                )
            else:
                DEEPMD_MODEL = models
        else:
            DEEPMD_MODEL = models

print(f"Starting ML-MM server using {EMLE_BACKEND} backend...")

# Create the EMLE socket.
sock = Socket()

try:
    sock.bind(EMLE_HOST, EMLE_PORT)
    sock.listen(EMLE_NUM_CLIENTS)

    # Write the PID to file in the current directory.
    with open("emle_pid.txt", "w") as f:
        f.write(f"{os.getpid()}\n")

    # Write the port to file in the current directory.
    with open("emle_port.txt", "w") as f:
        f.write(f"{EMLE_PORT}\n")
except:
    raise OSError(
        f"Server address already in use: ({EMLE_HOST}, {EMLE_PORT})"
    ) from None


# Import the EMLE calculator here so that we avoid the import overhead when the
# script is called to check if an existing server is running, e.g. when called
# as a background process by the orca executable.
from emle.emle import EMLECalculator

# Initialise the EMLE calculator.
print("Initialising EMLE calculator...")
mle_calculator = EMLECalculator(
    model=EMLE_MODEL,
    method=EMLE_METHOD,
    backend=EMLE_BACKEND,
    mm_charges=EMLE_MM_CHARGES,
    deepmd_model=DEEPMD_MODEL,
    rascal_model=RASCAL_MODEL,
    rascal_parm7=RASCAL_PARM7,
    device=EMLE_DEVICE,
    log=EMLE_LOG,
)

while True:
    print("Waiting for a connection...")
    connection, client_address = sock.accept()
    try:
        print("Client connected:", client_address)
        while True:
            msg, path = connection.receive()
            if msg == "emlerun":
                # Try to run the EMLE calculation.
                print("Running EMLE calculation...")
                try:
                    mle_calculator.run(path=path)
                    msg = "7:emlefin"
                    print("Finished!")
                except Exception as e:
                    msg = f"emlefail:{str(e)}"
                    msg = f"{len(msg)}:{msg}"
                    print("Failed!")

                # Tell the client that we have finished.
                connection.send(msg, len(msg))
            else:
                break
    finally:
        connection.close()
