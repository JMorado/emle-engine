#!/usr/bin/env python

######################################################################
# ML/MM: https://github.com/lohedges/sander-mlmm
#
# Copyright: 2023
#
# Authors: Lester Hedges   <lester.hedges@gmail.com>
#          Kirill Zinovjev <kzinovjev@gmail.com>
#
# ML/MM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# ML/MM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ML/MM. If not, see <http://www.gnu.org/licenses/>.
######################################################################

import os
import subprocess
import sys
import time

from mlmm.socket import Socket

print("Starting ML-MM client...")

# Check the number of command-line arguments.
if len(sys.argv) != 2:
    raise ValueError("usage: orca input_file")

# Get the ORCA input file name and validate.
orca_input = sys.argv[1]
if not os.path.exists(orca_input):
    raise ValueError(f"Couldn't locate ORCA input file: {orca_input}")

# Try to start and ML/MM server in the background. This will
try:
    print("Trying to start ML/MM server...")
    process = subprocess.Popen(
        ["mlmm-server"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )

# The server is already running.
except:
    print("ML/MM server already running!")
    pass

# Create a socket and connect.
sock = Socket()

# See if the MLMM HOST and PORT environment variable are set.
MLMM_HOST = os.getenv("MLMM_HOST")
try:
    MLMM_PORT = int(os.getenv("MLMM_PORT"))
except:
    MLMM_PORT = None

# Fallback to default values.
if not MLMM_HOST:
    MLMM_HOST = "localhost"
if not MLMM_PORT:
    MLMM_PORT = 10000

# Try to connect to the server. We try 100 times, waiting for 2 seconds
# following each failure. This should (hopefully) give the server enough
# time to start.
is_connected = False
for x in range(0, 100):
    try:
        print("Trying to establish a connection with the ML/MM server...")
        sock.connect(MLMM_HOST, MLMM_PORT)
    except:
        print("Failed. Retrying in 2 seconds...")
        time.sleep(2)
    else:
        print("Connection established!")
        is_connected = True
        break

if not is_connected:
    raise OSError(
        "Unable to establish connection with the ML/MM server. "
        "Please check that it is running."
    )

try:
    # Get the current working directory.
    cwd = os.getcwd()

    # Prepend the run message.
    msg = f"mlmmrun:{cwd}"

    # Prepend the message length.
    msg = f"{len(msg)}:{msg}"

    print("Requesting ML/MM calculation from server...")
    sock.send(msg, len(msg))

    msg, err = sock.receive()

    if msg == "mlmmfin":
        print("Received notice that the ML/MM calculation has finished.")
    elif msg == "mlmmfail":
        print("Received notice that the ML/MM calculation has failed.")
        print(f"[ERROR] {err}")
    else:
        raise RuntimeError(f"Invalid message received from ML/MM server: '{msg}'")

finally:
    print("Closing client connection.")
    sock.close()
